// Assuming these are defined in their respective .ts files:
// import { PdfDocument } from '../document';
// import { PdfDataType } from '../format/base'; // This is a generic type constraint
// import { PdfObjectBase } from '../format/object_base';

import { PdfDocument } from '../document';
import { PdfDataType } from '../format/base';
import { PdfObjectBase } from '../format/object_base';

/**
 * Base Object used in the PDF file.
 * All PDF objects that need to be referenced by an indirect object reference
 * and managed by the PdfDocument's object list should extend this class.
 */
export class PdfObject<T extends PdfDataType> extends PdfObjectBase<T> {
    /**
     * This allows any Pdf object to refer to the document being constructed.
     * Dart's `final PdfDocument pdfDocument;` translates to `public readonly pdfDocument: PdfDocument;`
     */
    public readonly pdfDocument: PdfDocument;

    /**
     * A flag indicating if this object is currently in use (e.g., referenced from the PDF structure).
     * Defaults to true.
     */
    public inUse: boolean = true;

    /**
     * Create a base Object used in the PDF file.
     * @param pdfDocument The PDF document to which this object belongs.
     * @param options.params The primary parameters dictionary or data structure for this PDF object.
     * @param options.objgen Optional object generation number. Defaults to 0.
     * @param options.objser Optional object serial number. If not provided, it's generated by the document.
     */
    constructor(
        pdfDocument: PdfDocument,
        options: {
            params: T; // Dart's `required T params`
            objgen?: number; // Dart's `int objgen = 0` (default value)
            objser?: number; // Dart's `int? objser` (nullable)
        },
    ) {
        // In Dart, `this.pdfDocument` in the constructor parameters automatically initializes
        // the `pdfDocument` field. In TypeScript, we do this explicitly after `super()`.
        // The super constructor call (Dart's initializer list `super(...)`) must be the first
        // statement in the TypeScript constructor body.
        super({
            objser: options.objser ?? pdfDocument.genSerial(), // Dart's `??` null-aware operator
            objgen: options.objgen ?? 0, // Apply default if not provided
            params: options.params,
            settings: pdfDocument.settings, // Assumed to be available on pdfDocument
        });

        this.pdfDocument = pdfDocument; // Explicitly assign the pdfDocument

        // Dart's `pdfDocument.objects.add(this);`
        // Assuming `pdfDocument.objects` is a `Set` or similar collection that has an `add` method.
        pdfDocument.objects.add(this);
    }

    /**
     * Prepare the object to be written to the stream.
     * This method should be overridden by subclasses to set up any necessary internal data
     * or parameters before the object's content is generated.
     * @remarks
     * Subclasses are expected to call `super.prepare()` if overriding this method.
     * This is equivalent to Dart's `@mustCallSuper` annotation.
     */
    // In TypeScript, there's no direct `@mustCallSuper` annotation. JSDoc is used.
    // The `override` keyword is used if this method is overriding a method declared in a base class.
    // Assuming `PdfObjectBase` might have a `prepare` method, or if this is the first declaration
    // of `prepare` in the hierarchy that is expected to be overridden.
    override prepare(): void {
        // Base implementation is empty, subclasses will add logic.
        // Call `super.prepare()` if this method is meant to extend a base class's `prepare`.
        // super.prepare(); // Uncomment if PdfObjectBase has a prepare method that needs to be called.
    }

    /**
     * Returns a string representation of this PdfObject.
     * @returns A string combining the runtime type and parameters.
     */
    override toString(): string {
        // Dart's `'$runtimeType $params'` translates to TypeScript template literals.
        // `this.constructor.name` provides the runtime class name.
        return `${this.constructor.name} ${this.params}`;
    }
}